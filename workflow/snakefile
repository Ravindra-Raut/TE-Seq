################### NEW SNAKE
import os
import pandas as pd
import csv
from pathlib import Path
from pandas.core.common import flatten

configfile: "conf/config.yaml"

# for pipeline in config["pipelines_to_deploy"]:
#     module f"{pipeline}":
#         snakefile: f"./{pipeline}/snakefile"
#         config: config[pipeline]
#     use rule * from f"{pipline}" as f"{pipeline}"_*

final_input = []


for pipeline in config["pipelines_to_deploy"]:
    if pipeline == "aref":
        module aref:
            snakefile: "aref/snakefile"
            config: config["aref"]
            prefix: "aref"
        use rule * from aref as aref_*
        def aref_rally():
            paths = [
                "annotations/repeatmasker.complete.gff3.gz.tbi",
                "annotations/refseq.complete.gff3.gz.tbi",
                "annotations/repeatmasker_refseq.complete.gtf",
                "annotations/repeatmasker_refseq.complete.gff3",
                "annotations/repeatmasker.complete.bed",
                "annotations/refseq.complete.bed",
                "annotations/rte_beds/outfile.txt",
                "annotations/repeatmasker_refseq.complete.sqlite",
                "annotations/cytobands.bed",
                "ref_indeces/make_star_index.out",
                expand("annotations/{annot}.fa", annot = ["repeatmasker_refseq.complete", "repeatmasker.complete", "refseq.complete"])
            ]
            return list(flatten(paths))
        for e in aref_rally():
            final_input.append("aref/" + e)

    if pipeline == "ldna":
        module ldna:
            snakefile: "ldna/snakefile"
            config: config["ldna"]
            prefix: "ldna"
        use rule * from ldna as ldna_*
        def ldna_rally():
            seqsummary = expand("qc/{sample}/{sample}.doradosummary.txt", sample = config["ldna"]["samples"])
            pycoQC = expand("qc/{sample}/{sample}pycoQC.html", sample = config["ldna"]["samples"])
            haplotaggedbam = expand("intermediates/{sample}/alignments/{rate}/{sample}.{type}.{modification_string}.sorted.filtered.haplotagged.bam", rate = config["ldna"]["rate"], type = config["ldna"]["type"], modification_string = config["ldna"]["modification_string"], sample = config["ldna"]["samples"])
            m1 = "results/plots/methylartist/locus/methylartistlocusplot_loci_of_interest.outfile",
            bedmethanalysis = "outfiles/bedmethylanalysis.txt"
            return list(flatten([m1, haplotaggedbam, bedmethanalysis]))
        for e in ldna_rally():
            final_input.append("ldna/" + e)

    if pipeline == "lrna":
        module lrna:
            snakefile: "lrna/snakefile"
            config: config["lrna"]
            prefix: "lrna"
        use rule * from lrna as lrna_*
        def lrna_rally():
            deseq = expand("results/agg/deseq/{alignmenttype}/{counttype}/{contrast}/results_genes.csv", alignmenttype = config["lrna"]["alignmenttypes"], counttype = config["lrna"]["counttypes"], contrast = config["lrna"]["contrasts"])
            enrichment_analysis = expand("results/agg/enrichment_analysis/{alignmenttype}/{counttype}/outfile.txt", alignmenttype = config["lrna"]["alignmenttypes"], counttype = config["lrna"]["counttypes"])
            enrichment_analysis_repeats = expand("results/agg/enrichment_analysis_repeats/{alignmenttype}/{counttype}/outfile.txt", alignmenttype = config["lrna"]["alignmenttypes"], counttype = config["lrna"]["counttypes"])
            repeatanalysisplots = expand("results/agg/repeatanalysis/{alignmenttype}/{counttype}/plots.outfile.txt", alignmenttype = config["lrna"]["alignmenttypes"], counttype = config["lrna"]["counttypes"])
            qc = [expand("qc/mycoplasma/mycoplasma{sample}.bam", sample = config["lrna"]["samples"]), "qc/multiqc_report.html"]
            bw = [expand("intermediates/{sample}/alignments/genome/{alignmenttype}/{sample}.F.bw", alignmenttype = config["lrna"]["alignmenttypes"], sample = config["lrna"]["samples"]), expand("intermediates/{sample}/alignments/genome/{alignmenttype}/{sample}.R.bw", alignmenttype = config["lrna"]["alignmenttypes"], sample = config["lrna"]["samples"])],
            genomebrowserplots = expand("outfiles/genomebrowserplots{alignmenttype}.out", alignmenttype = config["lrna"]["alignmenttypes"])
            m6a = expand("intermediates/{sample}/m6a/results/data.indiv_proba.csv", sample = config["lrna"]["samples"])
            return list(flatten([m6a, genomebrowserplots, bw, deseq, enrichment_analysis, enrichment_analysis_repeats, qc]))

        for e in lrna_rally():
            final_input.append("lrna/" + e)

<<<<<<< HEAD
    if pipeline == "gref":
        module gref:
            snakefile: "gref/snakefile"
            config: config["gref"]
            prefix: "gref"
        use rule * from gref as gref_*
        def gref_rally():
            return ["updated_ref/updated_ref.fa.fai"]
        for e in gref_rally():
            final_input.append("gref/" + e)
    if pipeline == "aref":
        module aref:
            snakefile: "aref/snakefile"
            config: config["aref"]
            prefix: "aref"
        use rule * from aref as aref_*
        def aref_rally():
            paths = [
                "annotations/repeatmasker.complete.gff3.gz.tbi",
                "annotations/refseq.complete.gff3.gz.tbi",
                "annotations/repeatmasker_refseq.complete.gtf",
                "annotations/repeatmasker_refseq.complete.gff3",
                "annotations/repeatmasker.complete.bed",
                "annotations/refseq.complete.bed",
                "annotations/rte_beds/outfile.txt",
                "annotations/repeatmasker_refseq.complete.sqlite",
                "annotations/cytobands.bed",
                "RefAnalysis/l1element_evo.outfile",
                "RefAnalysis/tldr_plots/tldr_plots.rds",
                expand("annotations/{annot}.fa", annot = ["repeatmasker_refseq.complete", "repeatmasker.complete", "refseq.complete"])
            ]
            return list(flatten(paths))
        for e in aref_rally():
            final_input.append("aref/" + e)
=======
>>>>>>> refs/remotes/origin/main
    if pipeline == "srna":
        module srna:
            snakefile: "srna/snakefile"
            config: config["srna"]
            prefix: "srna"
        if config["srna"]["library_type"] == "PE":
                use rule * from srna exclude fastp_SE,alignSTAR_SE,featurecounts_genes_SE,featurecounts_genesandrtes_SE as srna_*
        else:
                use rule * from srna exclude fastp_PEalignSTAR_PE,featurecounts_genes_PE,featurecounts_genesandrtes_PE as srna_*


        samples = config["srna"]["samples"]
        tecounttypes = config["srna"]["tecounttypes"]
        contrasts = config["srna"]["contrasts"]
        counttypes = config["srna"]["counttypes"]

        def srna_rally():
            deseq = expand("results/agg/deseq_telescope/{tecounttype}/{contrast}/results_genes.csv", tecounttype = config["srna"]["tecounttypes"], contrast = config["srna"]["contrasts"])
            enrichment_analysis = "results/agg/enrichment_analysis/outfile.txt"
            enrichment_analysis_repeats = expand("results/agg/enrichment_analysis_repeats/{tecounttype}/outfile.txt", tecounttype = config["srna"]["tecounttypes"])
            repeatanalysisplots = "results/agg/repeatanalysis_telescope/plots.outfile.txt",
            qc = [expand("qc/mycoplasma/mycoplasma{sample}.sam", sample = config["srna"]["samples"]), "qc/multiqc/multiqc_report.html"]
            return list(flatten([deseq, enrichment_analysis, enrichment_analysis_repeats, repeatanalysisplots, qc]))
       
        for e in srna_rally():
            final_input.append("srna/" + e)

# module ldna:
#     snakefile:
#         github("maxfieldk/pipeline", path="workflow/ldna/snakefile", tag="v0.1.0")
#     config:
#         config["ldna"]

print("final_input")
print(final_input)

rule all:
    input:
        [
            # expand("ldna/qc/{sample}/{sample}pycoQC.html", sample = config["ldna"]["samples"])
            
            final_input            
            ]
    default_target: True

include: "rules.smk"