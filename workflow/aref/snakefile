#tag BASECALLING
rule sym_link:
    input:
        aref_dir = config["symlink_aref"]["aref_dir"]
    output:
        sym_link_outfile = "aref.symlinked.outfile"
    shell:
        """
ln -s {input.aref_dir} aref
touch {output.sym_link_outfile}
        """

rule dorado:
    input:
        dir = "ldna/rawdata/{rate}/{sample}"
    output:
        calls = "aref/intermediates/{sample}/alignments/{rate}/{sample}.{type}.{modifications_string}.bam"
    wildcard_constraints:
        sample="[0-9A-Za-z]+",
        type = "[0-9A-Za-z]+",
        rate = "[0-9A-Za-z]+",
        modifications_string = "[0-9A-Za-z_-]+"
    params:
        dorado = config["dorado"],
        basecallingModel = lambda w: config["basecallingModel"][w.rate][w.type],
        reference = config["tldr_input_bam_ref"]
    resources:
        cpus_per_task =12,
        threads = 12,
        slurm_partition="gpu-he",
        mem_mb = 128000,
        slurm_extra="--time=96:00:00 --constraint=a6000 --gres=gpu:2"
    shell:
        """
mkdir -p $(dirname {output.calls})
mod_string=$(echo {wildcards.modifications_string} | tr "-" ",")

{params.dorado} \
basecaller \
{wildcards.type},$mod_string \
{input.dir} \
--recursive \
--verbose \
--reference {params.reference} > {output.calls}
        """


#ensure tldr_input_bams are a full path, not relative paths
rule tldr:
    input:
        bam = lambda w: config["tldr_input_bams"]
    params:
        tldr_input_bam_ref = lambda w: config["tldr_input_bam_ref"],
        tldr_te_ref = config["tldr_te_ref"]
    output:
        tldr = "aref/tldr/tldr.table.txt"
    resources:
        cpus_per_task = 24,
        mem_mb = 100000,
        runtime = 300
    conda:
        "tldr"
    shell:
        """
mkdir -p tldr
cd tldr
tldr -b {params.bam} \
-e {params.tldr_te_ref} \
-r {params.tldr_input_bam_ref} \
-p 20 \
--detail_output \
--extend_consensus 4000 \
--trdcol
cd ..
inputbam={params.bam}
mkdir -p $(dirname {output.tldr})
mv tldr/*.table.txt {output.tldr}
mv tldr $(dirname {output.tldr})/
        """

rule update_reference:
    input:
        reference = lambda w: config["tldr_input_bam_ref"],
        tldroutput = "aref/tldr/tldr.table.txt"
    output:
        updated_reference = "aref/ref_pre_ins_filtering.fa",
        non_ref_contigs = "aref/ref_pre_ins_filtering_nonrefcontigs.fa"
    conda:
        "repeatanalysis"
    script:
        "scripts/create_reference.R"


rule move_starting_reference:
    params:
        ref = config["starting_ref"],
        repeatmasker = config["starting_ref_repeatmasker"]
    output:
        ref = "aref/ref.fa"
    shell:
        """
cp {params.ref} {output.ref}
cp {params.repeatmasker} aref/repeatmasker/repeatmasker_raw.gtf
        """

rule index_reference:
    input:
        reference = "aref/ref.fa"
    output:
        reference_index = "aref/ref.fa.fai"
    conda:
        "omics"
    shell:
        """
samtools faidx {input.reference}
        """


def repeatmasker_input(wildcards):
    if config["update_ref_with_tldr"] == "yes":
        return "aref/ref_pre_ins_filtering_nonrefcontigs.fa"
    else:
        return config["ref"]
#NOTE THAT I LOAD A CLUSTER MODULE, ELSE REPEATMASKER DOES NOT LOAD A COMPILER DEPENDENCY
rule repeatmasker:
    input:
        fasta = repeatmasker_input
    params:
        repeatmaskerpath = config["repeatmaskerpath"],
        species = config["species"]
    output:
        rmout = "aref/repeatmasker/ref.fa.out"
    resources:
        cpus_per_task =20,
        runtime = 1200,
        mem_mb = 50000
    conda:
        "omics"
    shell:
        """
module load libnsl
mkdir -p $(dirname $(dirname {output}))
{params.repeatmaskerpath} -species {params.species} -pa {resources.cpus_per_task} -gff {input.fasta} -dir $(dirname $(dirname {output}))/ref
        """

rule getGtfs:
    input:
        rmout = "aref/repeatmasker/ref.fa.out",
        rmref = config["starting_ref_repeatmasker"]
    params:
        module_prefix = config["prefix"]
    output:
       ref = "aref/repeatmasker/repeatmasker_ref_raw.gtf",
       nonref = "aref/repeatmasker/repeatmasker_nonref_raw.gtf",
       merged = "aref/repeatmasker/repeatmasker_raw.gtf"
    conda:
        "evo2"
    shell:
        """
workflow/{params.module_prefix}/scripts/outToGtf.sh {input.rmout} {output.nonref}
cp {input.rmref} {output.ref}
cat {output.ref} {output.nonref} > {output.merged}
        """

rule process_gtf_tldr:
    input:
        gtf = "aref/repeatmasker/repeatmasker_raw.gtf",
        ref_cytobands = "aref/annotations/cytobands.bed",
        ref = "aref/ref_pre_ins_filtering.fa",
        tldroutput = "aref/tldr/tldr.table.txt"
    output:
        contigs_to_keep = "aref/contigs_to_keep.txt",
        filtered_tldr = "aref/tldr/tldr.table.kept_in_updated_ref.txt",
        repmask_gff2 = "aref/annotations/repeatmasker.gff2",
        repmask_gff3 = "aref/annotations/repeatmasker.gff3",
        r_annotation_fragmentsjoined = "aref/annotations/repeatmasker.gtf.rformatted.fragmentsjoined.csv"
    conda:
        "evo2"
    script:
        "scripts/process_gtf_tldr.R"

rule analyze_insertions:
    input:
        tldroutput = "aref/tldr/tldr.table.txt",
        filtered_tldr = "aref/tldr/tldr.table.kept_in_updated_ref.txt",
        r_annotation_fragmentsjoined = "aref/annotations/repeatmasker.gtf.rformatted.fragmentsjoined.csv",
        r_repeatmasker_annotation = "aref/annotations/repeatmasker_annotation.csv",
        ref = "aref/ref_pre_ins_filtering.fa"
    output:
        plots = "aref/RefAnalysis/tldr_plots/tldr_plots.rds",
    conda:
        "repeatanalysis"
    script:
        "scripts/analyze_insertions.R"
        
rule cleanup_updated_ref:
    input:
        updated_reference = "aref/ref_pre_ins_filtering.fa",
        contigs_to_keep = "aref/contigs_to_keep.txt"
    output:
        filtered_ref = "aref/ref.fa"
    conda:
        "omics"
    shell:
        """
seqkit grep --by-name -f {input.contigs_to_keep} {input.updated_reference} > {output.filtered_ref}
samtools faidx {output.filtered_ref}
        """

rule process_gtf:
    input:
        gtf = "aref/repeatmasker/repeatmasker_raw.gtf",
        ref_cytobands = "aref/annotations/cytobands.bed",
        ref = "aref/ref.fa"
    output:
        repmask_gff2 = "aref/annotations/repeatmasker.gff2",
        repmask_gff3 = "aref/annotations/repeatmasker.gff3",
        r_annotation_fragmentsjoined = "aref/annotations/repeatmasker.gtf.rformatted.fragmentsjoined.csv"
    conda:
        "evo2"
    script:
        "scripts/process_gtf.R"

rule move_refseq:
    input:
        ref_refseq_gff3 = config["ref_refseq_gff3"]
    output:
        refseq_gff3 = "aref/annotations/refseq.gff3"
    shell:
        """
cp {input.ref_refseq_gff3} {output.refseq_gff3}
        """


rule complete_gff3:
    input:
        gff3 = "aref/annotations/{annotation}.gff3",
    output:
        complete_gff3 = "aref/annotations/{annotation}.complete.gff3",
    resources:
        mem_mb = 128000,
        runtime = 300
    conda:
        "omics"
    shell:
        """
agat_convert_sp_gxf2gxf.pl --gff {input.gff3} -o {output.complete_gff3}.temp
awk '!/#/ {{print}}' {output.complete_gff3}.temp | awk '{{FS="\t";OFS="\t"}} $4 < 900000000000 {{print}}' | sort -k1,1V -k4,4n -k5,5n > {output.complete_gff3}
rm  {output.complete_gff3}.temp
        """


rule gff_to_gtf:
    input:
        complete_gff3 = "aref/annotations/{annotation}.complete.gff3",
    output:
        gtf = "aref/annotations/{annotation}.complete.gtf",
    conda:
        "omics"
    resources:
        mem_mb = 128000,
        runtime = 300
    shell:
        """
agat_convert_sp_gff2gtf.pl --gff {input.complete_gff3} -o {output.gtf}.temp
awk '!/#/ {{print}}' {output.gtf}.temp | awk '{{FS="\t";OFS="\t"}} $4 < 900000000000 {{print}}' | sort -k1,1V -k4,4n -k5,5n > {output.gtf}
rm {output.gtf}.temp
        """

rule gff_to_bed12:
    input:
        complete_gff3 = "aref/annotations/{annotation}.complete.gff3",
    output:
        bed12 = "aref/annotations/{annotation}.complete.bed"
    resources:
        mem_mb = 128000,
        runtime = 300
    conda:
        "omics"
    shell:
        """
agat_convert_sp_gff2bed.pl --gff {input.complete_gff3} -o {output.bed12}.temp
awk '!/#/ {{print}}' {output.bed12}.temp | awk '{{FS="\t";OFS="\t"}} $4 < 900000000000 {{print}}' | sort -k1,1V -k2,2n -k3,3n > {output.bed12}
rm {output.bed12}.temp
        """

rule merge_genes_and_repeats_gff:
    input:
        complete_repeat_gff3 = "aref/annotations/repeatmasker.complete.gff3",
        complete_refseq_gff3 = "aref/annotations/refseq.complete.gff3"
    output:
        merged_gff3 = "aref/annotations/repeatmasker_refseq.complete.gff3"
    resources:
        mem_mb = 128000,
        runtime = 300
    conda:
        "omics"
    shell:
        """
agat_sp_merge_annotations.pl -f {input.complete_refseq_gff3} -f {input.complete_repeat_gff3} -o {output.merged_gff3}.temp
awk '!/#/ {{print}}' {output.merged_gff3}.temp | awk '{{FS="\t";OFS="\t"}} $4 < 900000000000 {{print}}' | sort -k1,1V -k4,4n -k5,5n >  {output.merged_gff3}
rm {output.merged_gff3}.temp
        """

rule merge_OG_genes_and_repeats_gff3:
    input:
        repeatmasker = "aref/annotations/repeatmasker.gff3",
        refseq = "aref/annotations/refseq.gff3"
    output:
        merged_gff3 = "aref/annotations/repeatmasker_refseq.gff3"
    resources:
        mem_mb = 128000,
        runtime = 300
    conda:
        "omics"
    shell:
        """
awk '!/#/ {{print}}' {input.repeatmasker} | awk '{{FS="\t";OFS="\t"}} $4 < 900000000000 {{print}}' > {output.merged_gff3}.temp
awk '!/#/ {{print}}' {input.refseq} | awk '{{FS="\t";OFS="\t"}} $4 < 900000000000 {{print}}' >> {output.merged_gff3}.temp
cat {output.merged_gff3}.temp | sort -k1,1V -k4,4n -k5,5n > {output.merged_gff3}
rm {output.merged_gff3}.temp
        """


rule merge_genes_and_repeats_gtf:
    input:
        complete_repeat_gtf = "aref/annotations/repeatmasker.complete.gtf",
        complete_refseq_gtf = "aref/annotations/refseq.complete.gtf"
    output:
        merged_gtf = "aref/annotations/repeatmasker_refseq.complete.gtf"
    resources:
        mem_mb = 128000,
        runtime = 300
    conda:
        "omics"
    shell:
        """
agat_sp_merge_annotations.pl -f {input.complete_refseq_gtf} -f {input.complete_repeat_gtf} -o {output.merged_gtf}.temp
awk '!/#/ {{print}}' {output.merged_gtf}.temp | awk '{{FS="\t";OFS="\t"}} $4 < 900000000000 {{print}}' | sort -k1,1V -k4,4n -k5,5n > {output.merged_gtf}
rm {output.merged_gtf}.temp
        """

rule tabixindex:
    input:
        annot = "aref/annotations/{annot}"
    output:
        gz = "aref/annotations/{annot}.gz",
        index = "aref/annotations/{annot}.gz.tbi"
    resources:
        mem_mb = 60000,
        runtime = 300
    conda:
        "omics"
    shell:
        """

awk '!/#/ {{print}}' {input.annot} | sort -k1,1V -k4,4n -k5,5n -t '\t'| bgzip > {input.annot}.gz
tabix -p gff {input.annot}.gz
        """

rule get2bitgenome:
    input:
        ref = "aref/ref.fa"
    output:
        genome2bit = "aref/ref.2bit"
    conda:
        "omics"
    shell:
        """
faToTwoBit {input.ref} {output.genome2bit}
        """


rule makeTxDB:
    input:
        refseq = "aref/annotations/refseq.gff3",
        repeatmasker = "aref/annotations/repeatmasker.complete.gff3",
        genome2bit = "aref/ref.2bit"
    output:
        txdb = "aref/annotations/repeatmasker_refseq.complete.sqlite",
        txdbrefseq = "aref/annotations/refseq.sqlite",
        txdbrepeatmasker = "aref/annotations/repeatmasker.complete.sqlite"
    resources:
        mem_mb = 40000
    conda:
        "repeatanalysis"
    script:
        "scripts/txdbBSgenome.R"

rule get_transcriptome:
    input:
        gtf = "aref/annotations/{annot}.gtf",
        ref = "aref/ref.fa"
    output:
        fa = "aref/annotations/{annot}.fa"
    resources:
        mem_mb = 128000,
        runtime = 300
    conda:
        "omics"
    shell:
        """
agat_sp_extract_sequences.pl -g {input.gtf} -f {input.ref} -t exon --merge -o {output.fa}
        """

rule annotate_rtes:
    input:
        r_annotation_fragmentsjoined = "aref/annotations/repeatmasker.gtf.rformatted.fragmentsjoined.csv",
        ref = "aref/ref.fa"
    output:
        r_repeatmasker_annotation = "aref/annotations/repeatmasker_annotation.csv",
    conda:
        "evo2"
    script:
        "scripts/annotate_rtes.R"

rule getRTEbeds:
    input:
        r_annotation_fragmentsjoined = "aref/annotations/repeatmasker.gtf.rformatted.fragmentsjoined.csv",
        r_repeatmasker_annotation = "aref/annotations/repeatmasker_annotation.csv",
    output:
        outfile = "aref/annotations/rte_beds/outfile.txt"
    conda:
        "evo2"
    script:
        "scripts/getRTEbeds.R"

rule element_analysis:
    input:
        r_annotation_fragmentsjoined = "aref/annotations/repeatmasker.gtf.rformatted.fragmentsjoined.csv",
        r_repeatmasker_annotation = "aref/annotations/repeatmasker_annotation.csv",
        ref = "aref/ref.fa"
    params:
        l13 = config["l13fasta"]
    output:
        outfile = "aref/RefAnalysis/l1element_analysis.outfile",
        plots = "aref/RefAnalysis/l1element_analysis.rds"
    conda:
        "evo2"
    script:
        "scripts/element_analysis.R"


rule make_star_index:
    input:
        reference = "aref/ref.fa"
    output:
        outfile = "aref/ref_indeces/make_star_index.out"
    resources:
        cpus_per_task = 32,
        mem_mb = 128000,
        runtime = 300
    conda:
        "star"
    shell:
        """
mkdir -p $(dirname {output.outfile})
STAR --runThreadN  30 --runMode genomeGenerate --genomeDir $(dirname {output.outfile})/star_index --genomeFastaFiles {input.reference}
touch {output.outfile}
        """

rule cpgIslandFun:
    params:
        ref_cpgislands = config["ref_cpgislands"]
    output:
        cpg_islands_fullinfo = "aref/annotations/cpg_islands.tsv",
        cpg_islands = "aref/annotations/cpg_islands.bed",
        cpgi_shores = "aref/annotations/cpgi_shores.bed",
        cpgi_shelves = "aref/annotations/cpgi_shelves.bed"
    resources:
        cpus_per_task = 2,
        mem_mb = 20000,
        runtime = 60
    conda:
        "ds"
    script:
        "scripts/cpgIslandFun.R"

rule copySelectAnnotations:
    params:
        ref_cytobands = config["ref_cytobands"],
        ref_telomere = config["ref_telomere"],
        ref_ccres = config["ref_ccres"],
        ref_clinvar_bgz = config["ref_clinvar_bgz"],
        ref_clinvar_tbi = config["ref_clinvar_tbi"]
    output:
        ref_cytobands = "aref/annotations/cytobands.bed",
        ref_telomere = "aref/annotations/telomeres.bed",
        ref_ccres = "aref/annotations/ccres.bed",
        ref_clinvar_bgz = "aref/annotations/clinvar.vcf.gz",
        ref_clinvar_tbi = "aref/annotations/clinvar.vcf.gz.tbi"
    shell:
        """
cp {params.ref_cytobands} {output.ref_cytobands}
cp {params.ref_telomere} {output.ref_telomere}
cp {params.ref_ccres} {output.ref_ccres}
cp {params.ref_clinvar_bgz} {output.ref_clinvar_bgz}
cp {params.ref_clinvar_tbi} {output.ref_clinvar_tbi}
        """


rule create_blast_db:
    input:
        ref = "aref/ref.fa",
    output:
        blast_njs = "aref/ref.njs"
    conda:
        "repeatanalysis"
    shell:
        """
makeblastdb -in {input.ref} -dbtype nucl -out aref/ref
        """


rule transduction_mapping:
    input:
        filtered_tldr = "aref/tldr/tldr.table.kept_in_updated_ref.txt",
        r_annotation_fragmentsjoined = "aref/annotations/repeatmasker.gtf.rformatted.fragmentsjoined.csv",
        r_repeatmasker_annotation = "aref/annotations/repeatmasker_annotation.csv",
        ref = "aref/ref.fa",
        blast_njs = "aref/ref.njs"
    output:
        plots = "aref/RefAnalysis/tldr_plots/transduction_mapping.rds",
        transduction_df = "aref/RefAnalysis/transduction_df.csv"
    conda:
        "repeatanalysis"
    script:
        "scripts/transdcution_mapping.R"